stages:
  - prepare
  - build
  - test
  - publish

variables:
  VIRTER_VERSION: v0.12.0
  VMSHED_VERSION: v0.12.0
  BUILD_HELPERS_VERSION: dfbf85c26dd39ad1a88807b01fda1dc1d536abbb

prepare:
  image: nexus.at.linbit.com:5000/build-helpers:${BUILD_HELPERS_VERSION}
  stage: prepare
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH == 'master'
    - if: $CI_COMMIT_TAG
  variables:
    # git describe needs full history access
    GIT_DEPTH: 0
    # git describe does not need the submodule
    GIT_SUBMODULE_STRATEGY: none
  script:
    - SEMVER="$(semver-from-git.py)"
    - echo "SEMVER=${SEMVER}" >> .ci-build.env
    - echo "TAG=v${SEMVER/+/-}" >> .ci-build.env
  artifacts:
    reports:
      dotenv: .ci-build.env

.prepare-vm:
  stage: prepare
  rules:
    - if: $CI_MERGE_REQUEST_ID
      when: manual
      allow_failure: true
    - if: $CI_COMMIT_BRANCH == 'master'
      when: manual
      allow_failure: true
    - if: $CI_COMMIT_TAG
      when: manual
      allow_failure: true
  tags:
    - libvirt
  cache:
    paths:
      - download
  script:
    - |
      curl -sSfL -u gitlab-ci-token:$CI_JOB_TOKEN https://gitlab.at.linbit.com/linbit/build-helpers/-/archive/$BUILD_HELPERS_VERSION/ignored.tar.gz | tar -xvzf -
      mv build-helpers-* build-helpers
      . build-helpers/gitlab-utils.sh
    - ci_prepare_tools
    - ci_fetch_binary virter virter-$VIRTER_VERSION https://github.com/LINBIT/virter/releases/download/$VIRTER_VERSION/virter-linux-amd64
    - cd test/vms/
    - docker pull alpine
    - virter image build $BASE "${NAME}-${CI_COMMIT_SHORT_SHA}" -p ${NAME}.provision.toml ${EXTRA_BUILD_ARGS}
    - virter image save "${NAME}-${CI_COMMIT_SHORT_SHA}" --out "./${NAME}-${CI_COMMIT_SHORT_SHA}.qcow2"
    - virter image rm "${NAME}-${CI_COMMIT_SHORT_SHA}"
    - curl --user "$LINBIT_REGISTRY_USER:$LINBIT_REGISTRY_PASSWORD" --fail --upload-file "./${NAME}-${CI_COMMIT_SHORT_SHA}.qcow2" "${TEST_VM_ARCHIVE}/linstor-csi-${NAME}-test-vm"
    - rm "./${NAME}-${CI_COMMIT_SHORT_SHA}.qcow2"

prepare-sanity-vm:
  extends: .prepare-vm
  variables:
    NAME: sanity
    BASE: debian-10

prepare-e2e-vm:
  extends: .prepare-vm
  variables:
    NAME: e2e
    BASE: centos-7
    EXTRA_BUILD_ARGS: "--set values.DockerRegistryMirror=$DOCKER_REGISTRY_MIRROR"

.build:
  stage: build
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    GIT_DEPTH: 1
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH == 'master'
    - if: $CI_COMMIT_TAG
  tags:
    - shell
  script:
    # Use NOCACHE=true for release builds
    - if [ -n "${CI_COMMIT_TAG}" ]; then NOCACHE=true ; else NOCACHE=false ; fi
    - docker login -u ${LINBIT_REGISTRY_USER} -p ${LINBIT_REGISTRY_PASSWORD} ${LINBIT_DOCKER_REGISTRY}
    - make update upload REGISTRY=${LINBIT_DOCKER_REGISTRY} TAG="${TAG}-${ARCH}" ARCH="${ARCH}" NOCACHE="${NOCACHE}"
    - echo "CSI_PLUGIN_IMAGE_${ARCH}=${LINBIT_DOCKER_REGISTRY}/linstor-csi:${TAG}-${ARCH}" > .build.env
  artifacts:
    reports:
      dotenv:
        - .build.env

build-amd64:
  extends: .build
  variables:
    ARCH: amd64
  tags:
    - shell

build-s390x:
  rules:
    - if: $CI_MERGE_REQUEST_ID
      when: manual
      allow_failure: true
    - if: $CI_COMMIT_TAG
  extends: .build
  variables:
    ARCH: s390x
  tags:
    - s390x

build-tests:
  stage: build
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH == 'master'
    - if: $CI_COMMIT_TAG
  image: golang:1
  script:
    - make test/bin
  artifacts:
    paths:
      - test/bin

container_scanning:
  stage: test
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH == 'master'
    - if: $CI_COMMIT_TAG
  image:
    name: docker.io/aquasec/trivy:latest
    entrypoint: [""]
  variables:
    # No need to clone the repo, we exclusively work on artifacts.  See
    # https://docs.gitlab.com/ee/ci/runners/README.html#git-strategy
    GIT_STRATEGY: none
  script:
    - trivy --version
    - trivy client --exit-code 0 --format template --template "@/contrib/html.tpl" -o container-scan.html "$CSI_PLUGIN_IMAGE_amd64"
    # Prints full report
    - trivy client --exit-code 0 "$CSI_PLUGIN_IMAGE_amd64"
    # Fail on critical (unfixed) vulnerabilities
    - trivy --exit-code 1 --ignore-unfixed --severity CRITICAL --no-progress "$CSI_PLUGIN_IMAGE_amd64"
  # Ideally, we would use container_scanning for the artifact here. That is currently a paid feature, so we have to use code quality
  artifacts:
    when: always
    expose_as: "Container Scan"
    paths:
      - container-scan.html

.vmtest:
  stage: test
  tags:
    - libvirt
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH == 'master'
    - if: $CI_COMMIT_TAG
  cache:
    paths:
      - download
  script:
    - |
      curl -sSfL -u gitlab-ci-token:$CI_JOB_TOKEN https://gitlab.at.linbit.com/linbit/build-helpers/-/archive/$BUILD_HELPERS_VERSION/ignored.tar.gz | tar -xvzf -
      mv build-helpers-* build-helpers
      . build-helpers/gitlab-utils.sh
    - ci_prepare_tools
    - ci_fetch_binary virter virter-$VIRTER_VERSION https://github.com/LINBIT/virter/releases/download/$VIRTER_VERSION/virter-linux-amd64
    - ci_fetch_binary vmshed vmshed-$VMSHED_VERSION https://github.com/LINBIT/vmshed/releases/download/$VMSHED_VERSION/vmshed-linux-amd64
    - virter image pull linstor-csi-${NAME}-test-vm -u "${TEST_VM_ARCHIVE}/linstor-csi-${NAME}-test-vm" >/dev/null 2>&1 || echo "image already exists"
    - vmshed --vms vms.${NAME}.toml --tests tests.${NAME}.toml ${VMSHED_ARGS}
  artifacts:
    name: ${NAME}-reports
    paths:
      - tests-out/
    reports:
      junit:
        - tests-out/**/*.xml

sanity-test:
  extends: .vmtest
  variables:
    NAME: sanity

e2e-test:
  extends: .vmtest
  rules:
    - if: $CI_MERGE_REQUEST_ID
      when: manual
      allow_failure: true
    - if: $CI_COMMIT_BRANCH == 'master'
      when: manual
      allow_failure: true
    - if: $CI_COMMIT_TAG
      when: manual
      allow_failure: true
  timeout: 5h
  variables:
    NAME: e2e
    VMSHED_ARGS: --set values.LinstorCSIImage=${CSI_PLUGIN_IMAGE_amd64} --set values.DockerUsername=${TEST_DOCKER_USER} --set values.DockerPassword=${TEST_DOCKER_PASSWORD}

publish:
  stage: publish
  rules:
    - if: $CI_COMMIT_BRANCH == 'master'
      when: manual
      allow_failure: true
    - if: $CI_COMMIT_TAG
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [ "" ]
  script:
    - crane auth login -u $PUBLISH_REGISTRY_USER -p $PUBLISH_REGISTRY_PASSWORD $PUBLISH_REGISTRY
    - crane copy ${CSI_PLUGIN_IMAGE_amd64} ${PUBLISH_REGISTRY}/amd64/linstor-csi:${TAG}
    - crane copy ${CSI_PLUGIN_IMAGE_s390x} ${PUBLISH_REGISTRY}/s390x/linstor-csi:${TAG}
    - crane tag ${PUBLISH_REGISTRY}/amd64/linstor-csi:${TAG} latest
    - crane tag ${PUBLISH_REGISTRY}/s390x/linstor-csi:${TAG} latest
