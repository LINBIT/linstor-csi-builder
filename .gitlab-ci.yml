stages:
  - prepare
  - build
  - test
  - publish

variables:
  VIRTER_VERSION: v0.19.1
  VMSHED_VERSION: v0.15.0
  K8S_TEST_VERSION: v1.5.0
  E2E_BASE_IMAGE: alma-8
  BUILD_HELPERS_VERSION: dfbf85c26dd39ad1a88807b01fda1dc1d536abbb

prepare:
  image: ${LINBIT_DOCKER_REGISTRY}/build-helpers:${BUILD_HELPERS_VERSION}
  stage: prepare
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH == 'master'
    - if: $CI_COMMIT_TAG
  variables:
    # git describe needs full history access
    GIT_DEPTH: 0
    # git describe does not need the submodule
    GIT_SUBMODULE_STRATEGY: none
  script:
    - SEMVER="$(semver-from-git.py)"
    - echo "SEMVER=${SEMVER}" >> .ci-build.env
    - echo "TAG=v${SEMVER/+/-}" >> .ci-build.env
    - . /usr/local/bin/gitlab-utils.sh
    - ci_prepare_tools
    - ci_fetch_binary virter virter-$VIRTER_VERSION https://github.com/LINBIT/virter/releases/download/$VIRTER_VERSION/virter-linux-amd64
    - ci_fetch_binary vmshed vmshed-$VMSHED_VERSION https://github.com/LINBIT/vmshed/releases/download/$VMSHED_VERSION/vmshed-linux-amd64
    - ci_fetch_binary create-k8s-test-configs create-k8s-test-configs-$K8S_TEST_VERSION $LINBIT_REGISTRY_URL/repository/tools/create-k8s-test-configs:$K8S_TEST_VERSION
  artifacts:
    paths:
      - bin
      - download
    reports:
      dotenv: .ci-build.env

build:
  stage: build
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    GIT_DEPTH: 1
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH == 'master'
    - if: $CI_COMMIT_TAG
  # https://github.com/containerd/containerd/issues/5978
  retry: 1
  tags:
    - multiarch
  script:
    # Use NOCACHE=true for release builds
    - if [ -n "${CI_COMMIT_TAG}" ]; then NOCACHE=true ; else NOCACHE=false ; fi
    - ln -snf $DOCKER_AUTH_CONFIG_FILE $HOME/.docker/config.json
    - docker buildx build --platform ${PUBLISH_PLATFORMS} --build-arg=GOPROXY=$GOPROXY --build-arg=REPO_SOURCE=${LINBIT_DOCKER_REGISTRY}/rhel-container-secrets:latest --pull --push -t "${LINBIT_DOCKER_REGISTRY}/linstor-csi:${TAG}" --no-cache="${NOCACHE}" .
    - echo "CSI_PLUGIN_IMAGE=${LINBIT_DOCKER_REGISTRY}/linstor-csi:${TAG}" > .build.env
  artifacts:
    reports:
      dotenv:
        - .build.env

build-sanity-test:
  stage: build
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH == 'master'
    - if: $CI_COMMIT_TAG
  image: golang:1
  script:
    - cd linstor-csi
    - CGO_ENABLED=0 go test --ldflags '-extldflags "-static"' -gcflags all=-trimpath=. --asmflags all=-trimpath=. -o ../out/test/csi-sanity-test -c ./pkg/driver
  artifacts:
    paths:
      - out/test/csi-sanity-test

make-tar:
  stage: build
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH == 'master'
    - if: $CI_COMMIT_TAG
  image: golang:1
  script:
    - make bin-release ARCH="amd64 arm64 s390x ppc64le" SKIP_VERSION_CHECK=1 SEMVER=$SEMVER
  artifacts:
    paths:
      - out/
    exclude:
      - out/test

container_scanning:
  stage: test
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH == 'master'
    - if: $CI_COMMIT_TAG
  image:
    name: docker.io/aquasec/trivy:latest
    entrypoint: [ "" ]
  variables:
    # No need to clone the repo, we exclusively work on artifacts.  See
    # https://docs.gitlab.com/ee/ci/runners/README.html#git-strategy
    GIT_STRATEGY: none
  script:
    - trivy --version
    - trivy image --exit-code 0 --format template --template "@/contrib/html.tpl" -o container-scan.html "$CSI_PLUGIN_IMAGE"
    # Prints full report
    - trivy image --exit-code 0 "$CSI_PLUGIN_IMAGE"
    # Fail on critical (unfixed) vulnerabilities
    - trivy image --exit-code 1 --ignore-unfixed --severity CRITICAL "$CSI_PLUGIN_IMAGE"
  # Ideally, we would use container_scanning for the artifact here. That is currently a paid feature, so we have to use code quality
  artifacts:
    when: always
    expose_as: "Container Scan"
    paths:
      - container-scan.html

sanity-test:
  stage: test
  tags:
    - libvirt
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH == 'master'
    - if: $CI_COMMIT_TAG
  variables:
    LINBIT_PACKAGE_REPO_LINES: |
      deb $LINBIT_REGISTRY_URL/repository/packages-linbit-com focal drbd-9
      deb $LINBIT_REGISTRY_URL/repository/packages-linbit-com/staging focal drbd-9
  script:
    - export PATH=$CI_PROJECT_DIR/bin:$PATH
    - virter image pull ubuntu-focal $LINBIT_DOCKER_REGISTRY/vm/ubuntu-focal:latest
    - vmshed --vms test/sanity/vms.toml --tests test/sanity/tests.toml --set values.LinbitPackageRepoLines="$LINBIT_PACKAGE_REPO_LINES"
  artifacts:
    when: always
    paths:
      - tests-out/
    reports:
      junit:
        - tests-out/log/**/sanity-report.xml

e2e-test:
  stage: test
  tags:
    - libvirt
  rules:
    - if: $CI_MERGE_REQUEST_ID
      when: manual
      allow_failure: true
    - if: $CI_COMMIT_BRANCH == 'master'
      when: manual
      allow_failure: true
    - if: $CI_COMMIT_TAG
      when: manual
      allow_failure: true
  timeout: 8h
  script:
    - export PATH=$CI_PROJECT_DIR/bin:$PATH
    - create-k8s-test-configs -stable-releases-to-check=1 -include-next=1 -base-image=$E2E_BASE_IMAGE
    - virter image pull $E2E_BASE_IMAGE $LINBIT_DOCKER_REGISTRY/vm/$E2E_BASE_IMAGE:latest
    - cd virter
    - |
      cat <<EOF > csi-to-test.yml
      csi:
        pluginImage: $CSI_PLUGIN_IMAGE
      EOF
    - >
      vmshed
      --nvms $(( ${LINBIT_CI_MAX_CPUS:-20} / 3 ))
      --torun k8s-e2e-storage
      --variant k8s-backend
      --set values.DockerRegistryMirror=https://${DOCKER_REGISTRY_MIRROR}
      --set values.DrbdRegistryMirror=https://${DRBD_REGISTRY_MIRROR}
      --set values.K8sGcrIoMirror=https://${K8S_REGISTRY_MIRROR}
      --set values.RegistryK8sIoMirror=https://${REGISTRY_K8S_IO_MIRROR}
      --set values.DrbdIoUser=$PUBLISH_REGISTRY_USER
      --set values.DrbdIoPassword=$PUBLISH_REGISTRY_PASSWORD
      --set values.JustKubeadmImage=${LINBIT_DOCKER_REGISTRY}/linstor-kubernetes-tests/just-kubeadm:$K8S_TEST_VERSION
      --set values.HelmImage=$LINBIT_DOCKER_REGISTRY/linstor-kubernetes-tests/helm:$K8S_TEST_VERSION
      --set values.TestImage=$LINBIT_DOCKER_REGISTRY/linstor-kubernetes-tests/tests:$K8S_TEST_VERSION
      --set values.LinstorValues=/virter/workspace/csi-to-test.yml
  artifacts:
    when: always
    paths:
      - virter/tests-out/
    reports:
      junit:
        - virter/tests-out/test-results/*.xml
        - virter/tests-out/log/**/*-report.xml

publish:
  stage: publish
  rules:
    - if: $CI_COMMIT_BRANCH == 'master'
      when: manual
      allow_failure: true
    - if: $CI_COMMIT_TAG
  image:
    # Wait for https://github.com/google/go-containerregistry/issues/1183 before upgrade
    name: gcr.io/go-containerregistry/crane/debug:v0.7.0
    entrypoint: [ "" ]
  script:
    - mkdir -p $HOME/.docker
    - ln -snf $DOCKER_PUBLISH_AUTH_CONFIG_FILE $HOME/.docker/config.json
    - for PLATFORM in $(echo $PUBLISH_PLATFORMS | tr ',' '\n') ; do
    -   ARCH=${PLATFORM#*/}
    -   crane copy --platform $PLATFORM $CSI_PLUGIN_IMAGE $PUBLISH_REGISTRY/$ARCH/linstor-csi:$TAG
    -   crane tag $PUBLISH_REGISTRY/$ARCH/linstor-csi:$TAG latest
    - done
